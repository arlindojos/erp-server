// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model companies {
  id                String              @id @default(uuid())
  name              String              @unique
  website           String?
  employees         employees[]
  description       String?
  bank_account      bank_accounts?      @relation(fields: [bank_account_id], references: [id])
  bank_account_id   String?
  address           address?            @relation(fields: [address_id], references: [id])
  address_id        Int?
  companiesToAdmins companiesToAdmins[]
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())
}

model companiesToAdmins {
  id               Int              @id @default(autoincrement())
  company_admin_id String
  company_id       String
  company          companies        @relation(fields: [company_id], references: [id])
  company_admin    companies_admins @relation(fields: [company_admin_id], references: [id])
}

model roles {
  id         Int         @id @default(autoincrement())
  role       String      @unique
  employee   employees[]
  salary     Int
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
}

model salaries {
  id           Int           @id @default(autoincrement())
  payment_type payment_type?
  allowances   allowances[]
  deductions   deductions[]
  employee     employees     @relation(fields: [employee_id], references: [id])
  employee_id  String
  created_at   DateTime      @default(now())
  updated_at   DateTime      @default(now())
}

model payment_type {
  id            Int      @id @default(autoincrement())
  type          String   @default("Hourly")
  pay_salary    Int?
  hourly_rate   Int?
  hours_per_day Int?
  days_per_week Int
  pay_date      DateTime
  salaries      salaries @relation(fields: [salary_id], references: [id])
  salary_id     Int
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
}

model overtimes {
  id           Int       @id @default(autoincrement())
  worked_hours Int?
  worked_days  Int?
  employee     employees @relation(fields: [employee_id], references: [id])
  employee_id  String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
}

model deductions {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  amount      Int?
  percentage  Int?
  salaries    salaries @relation(fields: [salary_id], references: [id])
  salary_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
}

model allowances {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  amount      Int
  salaries    salaries @relation(fields: [salary_id], references: [id])
  salary_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
}

model bank_accounts {
  id          String      @id @default(uuid())
  name        String
  account_n   Int
  nib         Int
  employee    employees?  @relation(fields: [employee_id], references: [id])
  employee_id String
  created_at  DateTime    @default(now())
  updated_at  DateTime    @default(now())
  companies   companies[]
}

model inss {
  id          Int       @id @default(autoincrement())
  num         Int
  percentage  Int
  employee    employees @relation(fields: [employee_id], references: [id])
  employee_id String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
}

model companies_admins {
  id                String              @id @default(uuid())
  name              String
  l_name            String
  email             String              @unique
  tel               String
  tel2              String?
  genders           genders?            @relation(fields: [gender_id], references: [id])
  gender_id         Int?
  address           address?            @relation(fields: [address_id], references: [id])
  address_id        Int?
  companiesToAdmins companiesToAdmins[]
  owner             Boolean             @default(false)
  admin             Boolean             @default(false)
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())
  deleted           Boolean             @default(false)
}

model employees {
  id            String          @id @default(uuid())
  name          String
  l_name        String
  email         String?
  tel           String
  tel2          String?
  education     String?
  born          DateTime?
  marred        Boolean         @default(false)
  mother        mothers?        @relation(fields: [mother_id], references: [id])
  mother_id     String?
  father        fathers?        @relation(fields: [father_id], references: [id])
  father_id     String?
  spouse        spouses?        @relation(fields: [spouse_id], references: [id])
  spouse_id     String?
  bi            bi?             @relation(fields: [bi_id], references: [id])
  bi_id         String?
  genders       genders?        @relation(fields: [gender_id], references: [id])
  gender_id     Int?
  address       address?        @relation(fields: [address_id], references: [id])
  address_id    Int?
  companies     companies?      @relation(fields: [company_id], references: [id])
  company_id    String?
  hire_date     DateTime
  pay_date      DateTime
  role          roles           @relation(fields: [role_id], references: [id])
  role_id       Int
  inss          inss?
  salaries      salaries?
  overtime      overtimes?
  pre_emproyee  pre_emproyee?
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now())
  bank_accounts bank_accounts[]
}

model pre_emproyee {
  id                  Int       @id @default(autoincrement())
  cv_path             String?
  portfolio           String?
  experience          String?
  years_of_experience Int?
  employee            employees @relation(fields: [employee_id], references: [id])
  employee_id         String
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now())
}

model spouses {
  id         String      @id @default(uuid())
  name       String
  l_name     String?
  email      String?     @unique
  tel        String?
  tel2       String?
  education  String?
  profession String?
  born       DateTime?
  dead       Boolean     @default(false)
  bi         bi?         @relation(fields: [bi_id], references: [id])
  bi_id      String?
  genders    genders?    @relation(fields: [gender_id], references: [id])
  gender_id  Int?
  address    address?    @relation(fields: [address_id], references: [id])
  employees  employees[]
  address_id Int?
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
}

model mothers {
  id         String      @id @default(uuid())
  name       String
  l_name     String?
  email      String?     @unique
  tel        String?
  tel2       String?
  education  String?
  profession String?
  born       DateTime?
  dead       Boolean     @default(false)
  bi         bi?         @relation(fields: [bi_id], references: [id])
  bi_id      String?
  genders    genders?    @relation(fields: [gender_id], references: [id])
  gender_id  Int?
  address    address?    @relation(fields: [address_id], references: [id])
  employees  employees[]
  address_id Int?
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
}

model fathers {
  id         String      @id @default(uuid())
  name       String
  l_name     String?
  email      String?     @unique
  tel        String?
  tel2       String?
  education  String?
  profession String?
  born       DateTime?
  dead       Boolean     @default(false)
  bi         bi?         @relation(fields: [bi_id], references: [id])
  bi_id      String?
  genders    genders?    @relation(fields: [gender_id], references: [id])
  gender_id  Int?
  address    address?    @relation(fields: [address_id], references: [id])
  employees  employees[]
  address_id Int?
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
}

model bi {
  id            String     @id
  issued_in     String
  issuance_date DateTime
  expiry_date   DateTime
  employee      employees?
  spouse        spouses?
  mother        mothers?
  father        fathers?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())
}

model address {
  id             Int               @id @default(autoincrement())
  provinces      provinces?        @relation(fields: [province_id], references: [id])
  province_id    Int
  districts      districts?        @relation(fields: [district_id], references: [id])
  district_id    Int
  bairro         bairros?          @relation(fields: [bairro_id], references: [id])
  bairro_id      Int
  block          Int?
  house          Int?
  companie_admin companies_admins?
  spouses        spouses?
  mother         mothers?
  father         fathers?
  employee       employees?
  companies      companies?
  created_at     DateTime          @default(now())
  updated_at     DateTime          @default(now())
}

model genders {
  id               Int                @id @default(autoincrement())
  gender           String             @unique
  companies_admins companies_admins[]
  employees        employees[]
  spouses          spouses[]
  mother           mothers[]
  father           fathers[]
}

model provinces {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  districts  districts[]
  address    address?
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
}

model districts {
  id          Int       @id @default(autoincrement())
  name        String
  Zip_code    Int?
  bairro      bairros[]
  provinces   provinces @relation(fields: [province_id], references: [id])
  province_id Int
  address     address?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
}

model bairros {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  districts   districts @relation(fields: [district_id], references: [id])
  district_id Int
  address     address[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
}
