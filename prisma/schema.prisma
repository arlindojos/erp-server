// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model companies {
  id                String    @id @default(uuid())
  name              String    @unique
  website           String?
  company_team      users[]
  employees         String    @default("<=5")
  description       String?
  address           address?  @relation(fields: [address_id], references: [id])
  address_id        Int?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
}

model roles {
  id                Int    @id @default(autoincrement())
  role              String    @unique
  team_member       company_team[] 
  salary            Int
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
}

model salaries {
  id                Int    @id @default(autoincrement())
  payment_type      payment_type
  bonus
  cortes
  inss
  total
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
}

model payment_type {
  id                Int    @id @default(autoincrement())
  type              String  @default("Hourly")
  amount            Int
  hours_per_day     Int?
  days_per_week     Int?
  pay_date          DateTime
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
}

model overtime_pay {
  id                Int       @id @default(autoincrement())
  type              String    @default("Hourly")
  amount            Int
  worked_date       DateTime
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
}

model deductions {
  id                Int    @id @default(autoincrement())
  name 
  description
  amount            Int
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
}

model allowances {
  id                Int    @id @default(autoincrement())
  name 
  description
  amount            Int
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
}

model bank_accounts {
  id                Int    @id @default(autoincrement())
  name              String
  account_n         Int
  nib               Int
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
}

model company_team {
  id                   String    @id @default(uuid())
  email                String    @unique
  hire_date            DateTime 
  incs_number          Int
  users                users     @relation(fields: [user_id], references: [id])
  user_id              String
  role                 roles     @relation(fields: [role_id], references: [id])
  role_id              Int
  overtime_pay         overtime_pay
  cv_path              String?
  portfolio            String?
  experience           String?
  years_of_experience  Int?
  owner                Boolean   @default(false)
  admin                Boolean   @default(false)
  created_at           DateTime  @default(now())
  updated_at           DateTime  @default(now())
}

model users {
  id                String    @id @default(uuid())
  name              String
  l_name            String
  email             String    @unique
  tel               String
  tel2              String?
  education         String?
  profession        String?
  born              DateTime?
  marred            Boolean     @default(false)
  mother            mothers?    @relation(fields: [mother_id], references: [id])
  mother_id         String?
  father            fathers?    @relation(fields: [father_id], references: [id])
  father_id         String?
  spouse            spouses?    @relation(fields: [spouse_id], references: [id])
  spouse_id         String?
  bi                bi?    @relation(fields: [bi_id], references: [id])
  bi_id             String?
  genders           genders?    @relation(fields: [gender_id], references: [id])
  gender_id         Int?
  address           address? @relation(fields: [address_id], references: [id])
  address_id        Int?
  company_team      company_team?
  companies         companies?  @relation(fields: [company_id], references: [id])
  company_id        String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
  deleted           Boolean  @default(false)
} 

model spouses {
  id                String    @id @default(uuid())
  name              String
  l_name            String?
  email             String?    @unique
  tel               String?
  tel2              String?
  education         String?
  profession        String?
  born              DateTime?
  dead              Boolean  @default(false)
  bi                bi?    @relation(fields: [bi_id], references: [id])
  bi_id             String?
  genders           genders?    @relation(fields: [gender_id], references: [id])
  gender_id         Int?
  address           address? @relation(fields: [address_id], references: [id])
  users             users[]
  address_id        Int?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
} 

model mothers {
  id                String    @id @default(uuid())
  name              String
  l_name            String?
  email             String?    @unique
  tel               String?
  tel2              String?
  education         String?
  profession        String?
  born              DateTime?
  dead              Boolean  @default(false)
  bi                bi?    @relation(fields: [bi_id], references: [id])
  bi_id             String?
  genders           genders?    @relation(fields: [gender_id], references: [id])
  gender_id         Int?
  address           address? @relation(fields: [address_id], references: [id])
  users             users[]
  address_id        Int?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
} 

model fathers {
  id                String    @id @default(uuid())
  name              String
  l_name            String?
  email             String?    @unique
  tel               String?
  tel2              String?
  education         String?
  profession        String?
  born              DateTime?
  dead              Boolean  @default(false)
  bi                bi?    @relation(fields: [bi_id], references: [id])
  bi_id             String?
  genders           genders?    @relation(fields: [gender_id], references: [id])
  gender_id         Int?
  address           address? @relation(fields: [address_id], references: [id])
  users             users[]
  address_id        Int?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
} 

model bi {
  id                String @id
  issued_in         String
  issuance_date     DateTime
  expiry_date       DateTime
  user              users?
  spouse            spouses?
  mother            mothers?
  father            fathers?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
}

model address {
  id                Int @id @default(autoincrement())
  provinces         provinces?  @relation(fields: [province_id], references: [id])
  province_id       Int
  districts         districts? @relation(fields: [district_id], references: [id])
  district_id       Int
  bairro            bairros? @relation(fields: [bairro_id], references: [id])
  bairro_id         Int
  block             Int?
  house             Int?
  users             users?
  spouses           spouses?
  mother            mothers?
  father            fathers?
  companies         companies?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
}

model genders {
  id        Int @id @default(autoincrement())
  gender    String  @unique
  users     users[]
  spouses   spouses[]
  mother            mothers[]
  father            fathers[]
}

model provinces {
  id            Int @id @default(autoincrement())
  name          String  @unique
  districts     districts[] 
  address       address?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
}

model districts {
  id            Int @id @default(autoincrement())
  name          String  
  Zip_code      Int?
  bairro        bairros[]
  provinces     provinces  @relation(fields: [province_id], references: [id])
  province_id   Int
  address       address?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
}

model bairros {
  id            Int @id @default(autoincrement())
  name          String  @unique 
  districts     districts  @relation(fields: [district_id], references: [id])
  district_id   Int
  address       address[]
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
}
