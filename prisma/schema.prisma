// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model companies {
  id                String              @id @default(uuid())
  name              String              @unique
  website           String?
  employees         employees[]
  description       String?
  bank_account      bank_accounts?
  address           address?
  companiesToAdmins companiesToAdmins[]
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())
}

model companiesToAdmins {
  id               Int              @id @default(autoincrement())
  company          companies        @relation(fields: [company_id], references: [id])
  company_id       String
  company_admin    companies_admins @relation(fields: [company_admin_id], references: [id])
  company_admin_id String
}

model roles {
  id         Int         @id @default(autoincrement())
  role       String      @unique
  employee   employees[]
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
}

model salaries {
  id                Int           @id @default(autoincrement())
  pay_type          pay_type @relation(fields: [pay_type_id], references: [id])
  pay_type_id       Int
  allowances        allowances[]
  deductions        deductions[]
  employee          employees     @relation(fields: [employee_id], references: [id])
  employee_id       String
  created_at        DateTime      @default(now())
  updated_at        DateTime      @default(now())
}

model pay_type {
  id            Int      @id @default(autoincrement())
  type          String   @default("Hourly")
  pay_salary    Int?
  hourly_rate   Int?
  hours_per_day Int?
  days_per_week Int
  pay_date      DateTime
  salaries      salaries?
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
}

model overtimes {
  id           Int       @id @default(autoincrement())
  worked_hours Int?
  worked_days  Int?
  employee     employees @relation(fields: [employee_id], references: [id])
  employee_id  String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
}

model deductions {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  amount      Int?
  percentage  Int?
  salary      salaries @relation(fields: [salary_id], references: [id])
  salary_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
}

model allowances {
  id          Int      @id @default(autoincrement())
  name        String   
  description String?
  amount      Int
  salary      salaries @relation(fields: [salary_id], references: [id])
  salary_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
}

model bank_accounts {
  id          String      @id @default(uuid())
  name        String
  account_n   Int
  nib         Int
  company     companies?  @relation(fields: [company_id], references: [id])
  company_id  String
  employee    employees   @relation(fields: [employee_id], references: [id]) 
  employee_id String
  created_at  DateTime    @default(now())
  updated_at  DateTime    @default(now())
}

model inss {
  id          Int       @id @default(autoincrement())
  num         Int
  percentage  Int
  employee    employees @relation(fields: [employee_id], references: [id])
  employee_id String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
}

model companies_admins {
  id                String              @id @default(uuid())
  name              String
  l_name            String
  email             String              @unique
  tel               String
  tel2              String?
  genders           genders?            @relation(fields: [gender_id], references: [id])
  gender_id         Int?
  address           address?
  companiesToAdmins companiesToAdmins[]
  owner             Boolean             @default(false)
  admin             Boolean             @default(false)
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())
  deleted           Boolean             @default(false)
}

model employees {
  id            String          @id @default(uuid())
  name          String
  l_name        String
  email         String?
  tel           String
  tel2          String?
  education     String?
  born          DateTime?
  marred        Boolean         @default(false)
  mother        mothers? 
  father        fathers? 
  spouse        spouses?
  bi            bi? 
  genders       genders?        @relation(fields: [gender_id], references: [id])
  gender_id     Int?
  address       address? 
  company       companies?      @relation(fields: [company_id], references: [id]) 
  company_id    String
  hire_date     DateTime
  pay_schedule  pay_schedule    @relation(fields: [pay_schedule_id], references: [id])
  pay_schedule_id Int
  role          roles           @relation(fields: [role_id], references: [id])
  role_id       Int
  inss          inss?
  salaries      salaries?
  overtime      overtimes?
  pre_emproyee  pre_emproyee?
  bank_account  bank_accounts?
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now())
}

model pay_schedule {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  pay_frequency     String          @default("Monthly")
  pay_date          DateTime 
  employees         employees[]
  created_at        DateTime        @default(now())
  updated_at        DateTime        @default(now())
}

model pre_emproyee {
  id                  Int       @id @default(autoincrement())
  cv_path             String?
  portfolio           String?
  experience          String?
  years_of_experience Int?
  employee            employees @relation(fields: [employee_id], references: [id])
  employee_id         String
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now())
}

model spouses {
  id            Int      @id @default(autoincrement())
  name          String
  l_name        String?
  email         String?     @unique
  tel           String?
  tel2          String?
  education     String?
  profession    String?
  born          DateTime?
  dead          Boolean     @default(false)
  bi            bi? 
  genders       genders?    @relation(fields: [gender_id], references: [id])
  gender_id     Int?
  address       address? 
  employee      employees  @relation(fields: [employee_id], references: [id])
  employee_id   String
  created_at    DateTime    @default(now())
  updated_at    DateTime    @default(now())
}

model mothers {
  id            Int      @id @default(autoincrement())
  name          String
  l_name        String?
  email         String?     @unique
  tel           String?
  tel2          String?
  education     String?
  profession    String?
  born          DateTime?
  dead          Boolean     @default(false)
  bi            bi?   
  address       address? 
  employee      employees  @relation(fields: [employee_id], references: [id])
  employee_id   String
  created_at    DateTime    @default(now())
  updated_at    DateTime    @default(now())
}

model fathers {
  id            Int      @id @default(autoincrement())
  name          String
  l_name        String?
  email         String?     @unique
  tel           String?
  tel2          String?
  education     String?
  profession    String?
  born          DateTime?
  dead          Boolean     @default(false)
  bi            bi? 
  address       address? 
  employee      employees  @relation(fields: [employee_id], references: [id])
  employee_id   String
  created_at    DateTime    @default(now())
  updated_at    DateTime    @default(now())
}

model bi {
  id            String     @id
  issued_in     String
  issuance_date DateTime
  expiry_date   DateTime
  employee      employees?  @relation(fields: [employee_id], references: [id])
  employee_id   String?
  spouse        spouses?    @relation(fields: [spouse_id], references: [id])
  spouse_id     Int?
  mother        mothers?    @relation(fields: [mother_id], references: [id])
  mother_id     Int?
  father        fathers?    @relation(fields: [father_id], references: [id])
  father_id     Int?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @default(now())
}

model address {
  id              Int               @id @default(autoincrement())
  provinces       provinces?        @relation(fields: [province_id], references: [id])
  province_id     Int
  districts       districts?        @relation(fields: [district_id], references: [id])
  district_id     Int
  bairro          bairros?          @relation(fields: [bairro_id], references: [id])
  bairro_id       Int
  roud            Int?
  andar           Int?
  flat            Int?
  block           Int?
  house           Int?
  companie_admin  companies_admins? @relation(fields: [companie_admin_id], references: [id])
  companie_admin_id String
  spouse          spouses?          @relation(fields: [spouse_id], references: [id])
  spouse_id       Int
  mother          mothers?          @relation(fields: [mother_id], references: [id])
  mother_id       Int
  father          fathers?          @relation(fields: [father_id], references: [id])
  father_id       Int
  employee        employees?        @relation(fields: [employee_id], references: [id])
  employee_id     String
  companie        companies?        @relation(fields: [company_id], references: [id])
  company_id      String
  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now())
}

model genders {
  id               Int                @id @default(autoincrement())
  gender           String             @unique
  companies_admins companies_admins[]
  employees        employees[]
  spouses          spouses[]
}

model provinces {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  districts  districts[]
  address    address?
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
}

model districts {
  id          Int       @id @default(autoincrement())
  name        String
  Zip_code    Int?
  bairro      bairros[]
  provinces   provinces @relation(fields: [province_id], references: [id])
  province_id Int
  address     address?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
}

model bairros {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  districts   districts @relation(fields: [district_id], references: [id])
  district_id Int
  address     address[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
}
